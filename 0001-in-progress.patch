From 4a9a5de18af3b4f8c671961db086640257313a38 Mon Sep 17 00:00:00 2001
From: Rafael Weinstein <rafaelw@chromium.org>
Date: Mon, 6 Feb 2012 08:59:26 -0800
Subject: [PATCH] in progress

---
 mutation_summary.js |  157 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 157 insertions(+), 0 deletions(-)

diff --git a/mutation_summary.js b/mutation_summary.js
index 78eebc0..4628c55 100644
--- a/mutation_summary.js
+++ b/mutation_summary.js
@@ -744,6 +744,163 @@
                                           '[\\W]*(=(' + textPart + ')){0,1}' +
                                         '\\]){0,1}$');
 
+  function parseElementFilter2(elementFilter) {
+    var patterns = [];
+    var current;
+    var index = 0;
+
+    var WHITESPACE = /\w/;
+    var VALIDNAME = new RegExp(validNamePart);
+
+    var OUTSIDE = 0;
+    var TAGNAME = 1;
+    var BEGIN_ATTRNAME = 2;
+    var ATTRNAME = 3;
+    var END_ATTRNAME = 4;
+    var BEGIN_VALUE = 5;
+    var VALUE = 6;
+    var END_VALUE = 7;
+    var valueQuoteChar;
+
+    var SYNTAX_ERROR = 'elementFilter syntax error.';
+
+    var state = OUTSIDE;
+    var i = 0;
+    while (i < elementFilter.length) {
+      var c = elementFilter[i++];
+      switch (state) {
+        case OUTSIDE:
+          if (c.matches(VALIDNAME)) {
+            current = {
+              tagName: c
+            };
+            state = TAGNAME;
+            break;
+          }
+          if (c.matches(WHITESPACE))
+            break;
+
+          throw Error(SYNTAX_ERROR);
+
+        case TAGNAME:
+          if (c.matches(VALIDNAME)) {
+            current.tagName += c;
+            break;
+          }
+          if (c == '[') {
+            state = BEGIN_ATTRNAME;
+            break;
+          }
+          if (c.matches(WHITESPACE)) {
+            patterns.push(current);
+            current = undefined;
+            state = OUTSIDE;
+            break;
+          }
+
+          throw Error(SYNTAX_ERROR);
+
+        case BEGIN_ATTRNAME:
+          if (c.matches(WHITESPACE))
+            break;
+
+          if (c.matches(VALIDNAME)) {
+            state = ATTRNAME;
+            current.attrName = c;
+            break;
+          }
+
+          throw Error(SYNTAX_ERROR);
+
+        case ATTRNAME:
+          if (c.matches(VALIDNAME)) {
+            current.attrName += c;
+            break;
+          }
+          if (c.matches(WHITESPACE)) {
+            state = END_ATTRNAME;
+            break;
+          }
+          if (c == '=') {
+            state = BEGIN_VALUE;
+            break;
+          }
+
+          throw Error(SYNTAX_ERROR);
+
+        case END_ATTRNAME:
+          if (c == ']') {
+            patterns.push(current);
+            current = undefined;
+            state = OUTSIDE;
+          }
+          if (c == '=') {
+            state = BEGIN_VALUE;
+            break;
+          }
+          if (c.matches(WHITESPACE))
+            break;
+
+          throw Error(SYNTAX_ERROR);
+
+        case BEGIN_VALUE:
+          if (c == '"' || c == "'") {
+            valueQuoteChar = c;
+            current.attrValue = '';
+            state = VALUE;
+            break;
+          }
+          if (c.matches(WHITESPACE))
+            break;
+
+          state = VALUE;
+          current.attrValue = c;
+          break;
+        case VALUE:
+          if (c.matches(WHITESPACE)) {
+            if (valueQuoteChar != '') {
+              current.attrValue += c;
+              break;
+            } else {
+              state = END_VALUE;
+              valueQuoteChar = undefined;
+              break;
+            }
+          }
+          if (c == valueQuoteChar) {
+            state = END_VALUE;
+            valueQuoteChar = undefined;
+            break;
+          }
+          current.attrValue += c;
+          break;
+        case END_VALUE:
+          if (c == ']') {
+            patterns.push(current);
+            current = undefined;
+            break;
+          }
+          if (c.matches(WHITESPACE)) {
+            break;
+          }
+
+          throw Error(SYNTAX_ERROR);
+          break;
+      }
+    }
+
+    if (current) {
+      if (state == TAGNAME)
+        patterns.push(current);
+      else
+        throw Error(SYNTAX_ERROR);
+    }
+
+    return patterns;
+  }
+
+  MutationSummary.parseElementFilter2 = parseElementFilter2;
+
   // TODO(rafaelw: make patterns input be just a string
   function parseElementFilter(patterns) {
     var syntaxError = Error('Invalid elementFilter syntax');
-- 
1.7.8.3

